import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

/**
* Dictionary.java is a special dictionary with coding words which you'll
*  use your whole career as a programmer. 
 * The following class gives you access to the dictionary in many 
 * different ways for information such as the page where the word's 
 * at (index), if the word exist, etc.
* The objective is to complete the tasks so the dictionary works perfectly. 
 * 
 * Important: If you've never worked with ArrayLists before, it's 
 * recommended to study the API of ArrayList before
* And remember, most of these (if not all) can be solved iteratively 
 * but should be solved recursively for practice. 
 * 
 * @author Maria Novoa
* @author Luis Rivera
*
*/

public class RecDictionary {

              private ArrayList<String> dictionary;

              public RecDictionary(ArrayList<String> dictionary) {
                           this.dictionary = dictionary;
              }

              public RecDictionary() {
                           this.dictionary = new ArrayList<String>();
              }

              public ArrayList<String> getDictionary(){
                           return dictionary;
              }

              /**
              * Overrides from the class Object to check if the dictionary sent 
               * and the this are actually the same.
              *
              * @param other
              * 
               * Note that instanceOf makes sure that the object sent is an 
               * instance of the class (You'll see this later on class)
              */

              @Override
              public boolean equals(Object other) {
                           if(other == null) 
                                         return false;
                           if(!(other instanceof RecDictionary))
                                         return false;

                           RecDictionary dother = (RecDictionary) other;

                           if(this.dictionary.size() != dother.dictionary.size())
                                         return false;
                           for (int i = 0; i < this.dictionary.size(); i++) {
                                         if(!(this.dictionary.get(i).equals(dother.dictionary.get(i))))
                                                       return false;
                           }
                           return true;
              }

              /*
              * This method takes a given string and a given character 
               * and removes all occurrences of the character
              * from the string. 
               * 
               * Returns the modified string. 
               * 
               * Note: Must be recursive! 
               * Hint: No helper method needed. 
               */

              public String removeCharAt(String word, char ch) {
                           if(word.length()<=1)
                                         return word;
                           int index = word.indexOf(ch);
                           if (index <0)
                                         return word;
                      ï¿½
