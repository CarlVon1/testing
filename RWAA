import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JComponent;
import javax.swing.JFrame;
// The following RaceWrapper_P4_A class wraps several classes implementing the car race discussed in class.  For this question your
//job is to add a MovingWord class to the  RaceWrapper_P4_A class.  The class should implement the Raceable  interface WITHOUT EXTENDING Car. 
//MovingWord draws a moving text string in place  of a car.  The desired text string will be specified to the MovingWord(xPos, yPos, word) constructor. 
//For instance, if the word specified is "Text Car", then in place of a car, the Raceable object will display the String "TextCar".
//To display a text string at position(xPos, yPos)  you can use the g2.drawString(string, xPos, yPos, word)method.
//The MovingWord class should also implement an getWord() getter method that returns the word displayed by the target MovingWord object.
//You should modify the RaceStage constructor to add normal Car's in even positions and MovingWord's on odd positions of the list. 
//The text string displayed by these MovingWord object should consist of the String "WORD #" followed by the lane number, as you can verify in the test class.
//
public class RaceWrapper_P4_A {

//	public static void main (String[] args) throws InterruptedException {
//
//		JFrame mainFrame = new JFrame();
//		mainFrame.setTitle("CIIC 4010/ICOM 4015 Exam 3");
//		int raceWidth = 800;
//		int raceHeight = 600;
//		mainFrame.setSize(raceWidth, raceHeight);
//		RaceStage theCarRace = new RaceStage(raceWidth, raceHeight);
//		mainFrame.add(theCarRace);
//		mainFrame.setVisible(true);
//		mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//
//		while (!theCarRace.someCarWon()) {
//			mainFrame.repaint();
//			Thread.sleep(100);
//		}
//		mainFrame.repaint();		
//	}


	public static class RaceStage extends JComponent {

		private static final long serialVersionUID = 1L;

		public ArrayList<Raceable> raceables;

		private Random carDistanceGenerator = new Random();

		private final int MAX_NUM_CARS = 12;
		private final int DEFAULT_CAR_SPEED = 10; // In pixels per time slice
		private final int DEFAULT_CAR_PADDING = 10;

		private boolean someCarWon = false;
		private int numCars;

		public boolean someCarWon() {
			return someCarWon;
		}

		public RaceStage(int width, int height) {

			// Calculate number of cars
			this.numCars = MAX_NUM_CARS;
			raceables = new ArrayList<Raceable>();
			int lanePosition = 7;
			for(int i=0; i<numCars; i++) {
				if(i%2 ==0) {
				raceables.add(new Car(0, lanePosition));}
				else {
				raceables.add(new MovingWord(0, lanePosition,"WORD #" + String.valueOf(i)));	
				}
				lanePosition += raceables.get(i).getHeight() + DEFAULT_CAR_PADDING;
			}
		}

		public void paintComponent(Graphics g) {

			// Draw each car
			for (int i=0; i<numCars; i++) {
				raceables.get(i).draw(g);
			}

			// Move cars
			int nextDistance = 0;
			for (int i=0; i<numCars; i++) {
				nextDistance = carDistanceGenerator.nextInt(DEFAULT_CAR_SPEED);
				if ((raceables.get(i).getXPos() + raceables.get(i).getWidth() + nextDistance) >= this.getWidth()) {
					nextDistance -= (raceables.get(i).getXPos() + raceables.get(i).getWidth() + nextDistance) - this.getWidth();
					this.someCarWon = true;
				}
				raceables.get(i).setPos(raceables.get(i).getXPos() + nextDistance, raceables.get(i).getYPos());
			}
		}
	}

	public interface Raceable {
		public int getXPos();
		public int getYPos();
		public int getWidth();
		public int getDirection();
		public int getHeight();
		public Color getColor();
		public void setPos(int xPos, int yPos);
		public void draw(Graphics g);
	}

	public static abstract class Vehicle implements Raceable {

		private int xPos;
		private int yPos;
		private int width;
		private int height;
		private int direction;
		private Color color;

		private final static int DEFAULT_CAR_WIDTH = 60;
		public final static int DEFAULT_CAR_HEIGHT = 30;

		public Vehicle(int xPos, int yPos) {
			this.xPos = xPos;
			this.yPos = yPos;
			this.width = DEFAULT_CAR_WIDTH;
			this.height = DEFAULT_CAR_HEIGHT;
			this.direction = 1; // Car initially moving left to right
		}

		public int getXPos() { return xPos; }
		public int getYPos() { return yPos; }
		public int getWidth() { return width; }
		public int getDirection() { return direction; }
		public int getHeight() { return height; }
		public Color getColor() { return color; }
		public void setPos(int xPos, int yPos) { this.xPos = xPos; this.yPos = yPos; }
		public abstract void draw(Graphics g);

	}

	public static class Car extends Vehicle {

		private final static int DEFAULT_CAR_WIDTH = 60;
		public final static int DEFAULT_CAR_HEIGHT = 30;

		public Car(int xPos, int yPos) { super(xPos, yPos); }

		public void draw(Graphics g) {

			Graphics2D g2 = (Graphics2D) g;
			Line2D.Double rearWindow = new Line2D.Double(this.getXPos()+10, this.getYPos()+10, this.getXPos()+20, this.getYPos()+0);
			Line2D.Double roof = new Line2D.Double(this.getXPos()+20, this.getYPos()+0, this.getXPos()+40, this.getYPos()+0);
			Line2D.Double frontWindow = new Line2D.Double(this.getXPos()+40, this.getYPos()+0, this.getXPos()+50, this.getYPos()+10);
			Rectangle body = new Rectangle(this.getXPos()+0,this.getYPos()+10,60,10);
			Ellipse2D.Double rearTire = new Ellipse2D.Double(this.getXPos()+10, this.getYPos()+20, 10, 10);
			Ellipse2D.Double frontTire = new Ellipse2D.Double(this.getXPos()+40, this.getYPos()+20, 10, 10);
			Ellipse2D.Double redLight = new Ellipse2D.Double(this.getXPos()+0, this.getYPos()+10, 5, 5);
			Ellipse2D.Double yellowLight = new Ellipse2D.Double(this.getXPos()+55, this.getYPos()+10, 5, 5);

			g2.setColor(Color.BLACK);
			g2.draw(rearWindow);
			g2.draw(roof);
			g2.draw(frontWindow);
			g2.setColor(this.getColor());
			g2.draw(body);
			g2.setColor(Color.BLACK);
			g2.fill(rearTire);
			g2.fill(frontTire);
			g2.setColor(Color.RED);
			g2.fill(redLight);
			g2.setColor(Color.yellow);
			g2.fill(yellowLight);
		}

		
	}

	public static class MovingWord implements Raceable {
		
		private int xPos;
		private int yPos;
		private String word;
		private int width;
		private int height;
		private int direction;
		private Color color;

		private final static int DEFAULT_CAR_WIDTH = 60;
		public final static int DEFAULT_CAR_HEIGHT = 30;


		public MovingWord(int xPos, int yPos, String word) {
			this.xPos = xPos;
			this.yPos = yPos;
			this.word = word;
			this.setWidth(DEFAULT_CAR_WIDTH);
			this.setHeight(DEFAULT_CAR_HEIGHT);
			this.setDirection(1); // Car initially moving left to right
		}

		public String getWord() {
			return this.word;
		}

		@Override
		public int getXPos() {
			return xPos;
		}

		@Override
		public int getYPos() {
			return yPos;
		}

		@Override
		public int getWidth() {
			
			return 60;
		}

		@Override
		public int getDirection() {
			
			return 1;
		}

		@Override
		public int getHeight() {
			
			return 30;
		}

		@Override
		public Color getColor() {
			
			return Color.BLACK;
		}

		@Override
		public void setPos(int xPos, int yPos) {
			this.xPos = xPos;
			this.yPos = yPos;
			
		}

		@Override
		public void draw(Graphics g) {
			g.drawString(word, xPos, yPos);
			
		}

		public void setWidth(int width) {
			this.width = width;
		}

		public void setHeight(int height) {
			this.height = height;
		}

		public void setColor(Color color) {
			this.color = color;
		}

		public void setDirection(int direction) {
			this.direction = direction;
		}
		
	
	}
}
